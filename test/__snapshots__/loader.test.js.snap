// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`loader should add vendor prefixes ('vendors' option): output 1`] = `
".nib {
  background: -webkit-linear-gradient(top, #fff, #000);
  background: -moz-linear-gradient(top, #fff, #000);
  background: -o-linear-gradient(top, #fff, #000);
  background: -ms-linear-gradient(top, #fff, #000);
  background: linear-gradient(to bottom, #fff, #000);
  position: fixed;
  bottom: 0;
  right: 0;
}
@-moz-keyframes slidein {
  from {
    -webkit-transform: translateX(0%);
    -moz-transform: translateX(0%);
    -o-transform: translateX(0%);
    -ms-transform: translateX(0%);
    transform: translateX(0%);
  }
  to {
    -webkit-transform: translateX(100%);
    -moz-transform: translateX(100%);
    -o-transform: translateX(100%);
    -ms-transform: translateX(100%);
    transform: translateX(100%);
  }
}
@-webkit-keyframes slidein {
  from {
    -webkit-transform: translateX(0%);
    -moz-transform: translateX(0%);
    -o-transform: translateX(0%);
    -ms-transform: translateX(0%);
    transform: translateX(0%);
  }
  to {
    -webkit-transform: translateX(100%);
    -moz-transform: translateX(100%);
    -o-transform: translateX(100%);
    -ms-transform: translateX(100%);
    transform: translateX(100%);
  }
}
@-o-keyframes slidein {
  from {
    -webkit-transform: translateX(0%);
    -moz-transform: translateX(0%);
    -o-transform: translateX(0%);
    -ms-transform: translateX(0%);
    transform: translateX(0%);
  }
  to {
    -webkit-transform: translateX(100%);
    -moz-transform: translateX(100%);
    -o-transform: translateX(100%);
    -ms-transform: translateX(100%);
    transform: translateX(100%);
  }
}
@keyframes slidein {
  from {
    -webkit-transform: translateX(0%);
    -moz-transform: translateX(0%);
    -o-transform: translateX(0%);
    -ms-transform: translateX(0%);
    transform: translateX(0%);
  }
  to {
    -webkit-transform: translateX(100%);
    -moz-transform: translateX(100%);
    -o-transform: translateX(100%);
    -ms-transform: translateX(100%);
    transform: translateX(100%);
  }
}
"
`;

exports[`loader should allow adding include paths ('include' option): output 1`] = `
".a {
  color: #aaa;
}
.b {
  color: #bbb;
}
"
`;

exports[`loader should allow defining variables/functions ('define' option): output 1`] = `
".define {
  padding: 10px;
  margin: 20px;
}
"
`;

exports[`loader should allow importing files ('import' option): output 1`] = `
".a {
  color: #aaa;
}
.b {
  color: #bbb;
}
.c {
  color: #ccc;
}
"
`;

exports[`loader should allow using plugins ('use' option): output 1`] = `
".nib {
  background: linear-gradient(to bottom, #fff, #000);
  position: fixed;
  bottom: 0;
  right: 0;
}
"
`;

exports[`loader should generate sourcemaps: output 1`] = `
Object {
  "mappings": "AAAA;EACC,OAAM,KAAN;;ACDD;EACC,OAAM,KAAN;;ACDD;EACC,OAAM,KAAN;;ACMD;EAFC,OAAM,oBAAN",
  "names": Array [],
  "sourceRoot": "/x/packages/stylus-native-loader/test/fixtures",
  "sources": Array [
    "test/fixtures/imports/a.styl",
    "test/fixtures/imports/b.styl",
    "test/fixtures/imports/c.styl",
    "test/fixtures/basic.styl",
  ],
  "sourcesContent": Array [
    ".a
	color #aaa",
    ".b
	color #bbb",
    ".c
	color #ccc",
    "@require 'imports'

$color = red

color(color)
	color complement(color)

body
	color rgba($color, .5)",
  ],
  "version": 3,
}
`;

exports[`loader should generate sourcemaps: output 2`] = `
Object {
  "mappings": "AAAA;EACC,OAAM,KAAN;;ACDD;EACC,OAAM,KAAN;;ACDD;EACC,OAAM,KAAN;;ACMD;EAFC,OAAM,oBAAN",
  "names": Array [],
  "sourceRoot": "/x/packages/stylus-native-loader/test/fixtures",
  "sources": Array [
    "test/fixtures/imports/a.styl",
    "test/fixtures/imports/b.styl",
    "test/fixtures/imports/c.styl",
    "test/fixtures/basic.styl",
  ],
  "version": 3,
}
`;

exports[`loader should generate sourcemaps: output 3`] = `
Object {
  "mappings": "AAAA;EACC,OAAM,KAAN;;ACDD;EACC,OAAM,KAAN;;ACDD;EACC,OAAM,KAAN;;ACMD;EAFC,OAAM,oBAAN",
  "names": Array [],
  "sourceRoot": "/x/packages/stylus-native-loader/test/fixtures",
  "sources": Array [
    "test/fixtures/imports/a.styl",
    "test/fixtures/imports/b.styl",
    "test/fixtures/imports/c.styl",
    "test/fixtures/basic.styl",
  ],
  "version": 3,
}
`;

exports[`loader should import CSS files ('includeCSS' true): output 1`] = `
"@import url(\\"https://fonts.googleapis.com/css2?family=Open+Sans:wght@300;400;600&display=swap\\");
.a {
	color: #aaa;
}
.b {
	color: #bbb;
}
"
`;

exports[`loader should not add vendor prefixes ('vendors' option): output 1`] = `
".nib {
  background: linear-gradient(to bottom, #fff, #000);
  position: fixed;
  bottom: 0;
  right: 0;
}
@keyframes slidein {
  from {
    transform: translateX(0%);
  }
  to {
    transform: translateX(100%);
  }
}
"
`;

exports[`loader should not generate sourcemaps: output 1`] = `undefined`;

exports[`loader should not generate sourcemaps: output 2`] = `undefined`;

exports[`loader should not import CSS files ('includeCSS' false): output 1`] = `
"@import url(\\"https://fonts.googleapis.com/css2?family=Open+Sans:wght@300;400;600&display=swap\\");
@import 'css/a.css';
@import 'b';
"
`;

exports[`loader should resolve aliases: output 1`] = `
".a {
  color: #aaa;
}
.b {
  color: #bbb;
}
.c {
  color: #ccc;
}
"
`;

exports[`loader should resolve aliases: output 2`] = `
".a {
  color: #aaa;
}
.b {
  color: #bbb;
}
.c {
  color: #ccc;
}
"
`;

exports[`loader should resolve relative imports: output 1`] = `
".a-color {
  color: #aaa;
}
.b-color {
  color: #bbb;
}
.c-color {
  color: #ccc;
}
"
`;

exports[`loader should resolve urls accordingly ('resolveUrl' option): output 1`] = `
".test {
  background-image: url(\\"urls/img.png\\");
}
.fake {
  background-image: url(\\"fake.png\\");
}
"
`;

exports[`loader should resolve urls accordingly ('resolveUrl' option): output 2`] = `
".test {
  background-image: url(\\"urls/img.png\\");
}
.fake {
  background-image: url(\\"urls/fake.png\\");
}
"
`;

exports[`loader should resolve urls accordingly ('resolveUrl' option): output 3`] = `
".test {
  background-image: url(\\"img.png\\");
}
.fake {
  background-image: url(\\"fake.png\\");
}
"
`;

exports[`loader should work: output 1`] = `
".a {
  color: #aaa;
}
.b {
  color: #bbb;
}
.c {
  color: #ccc;
}
body {
  color: rgba(0,255,255,0.5);
}
"
`;
